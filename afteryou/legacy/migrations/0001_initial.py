# Generated by Django 5.2.4 on 2025-08-09 06:02

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DigitalLocker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='My Digital Legacy Vault', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Instructions for your inheritor')),
                ('inheritor_name', models.CharField(max_length=200)),
                ('inheritor_email', models.EmailField(max_length=254)),
                ('inheritor_phone', models.CharField(blank=True, max_length=20)),
                ('master_key_hash', models.TextField()),
                ('otp_valid_hours', models.PositiveIntegerField(default=24, help_text='Hours OTP remains valid')),
                ('access_attempts_limit', models.PositiveIntegerField(default=3)),
                ('auto_delete_after_access', models.BooleanField(default=False)),
                ('auto_delete_days', models.PositiveIntegerField(default=30, help_text='Days after trigger before auto-deletion')),
                ('status', models.CharField(choices=[('active', 'Active'), ('locked', 'Locked'), ('triggered', 'Death Trigger Activated'), ('accessed', 'Accessed by Inheritor'), ('expired', 'Expired'), ('deleted', 'Deleted')], default='active', max_length=20)),
                ('triggered_at', models.DateTimeField(blank=True, null=True)),
                ('accessed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='digital_locker', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'digital_locker',
            },
        ),
        migrations.CreateModel(
            name='CredentialEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('email', 'Email Account'), ('banking', 'Banking & Finance'), ('crypto', 'Cryptocurrency'), ('social', 'Social Media'), ('cloud', 'Cloud Storage'), ('domain', 'Domain & Hosting'), ('subscription', 'Subscriptions'), ('other', 'Other')], default='other', max_length=20)),
                ('website_url', models.URLField(blank=True)),
                ('account_identifier', models.CharField(blank=True, help_text='Username, email, or account ID', max_length=200)),
                ('notes', models.TextField(blank=True, help_text='Additional instructions or notes')),
                ('encrypted_username', models.TextField(blank=True)),
                ('encrypted_password', models.TextField(blank=True)),
                ('encrypted_additional_data', models.TextField(blank=True, help_text='JSON of additional encrypted fields')),
                ('priority', models.PositiveIntegerField(default=1, help_text='1=Critical, 2=Important, 3=Optional')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('locker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credentials', to='legacy.digitallocker')),
            ],
            options={
                'db_table': 'credential_entry',
                'ordering': ['priority', '-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='LockerAccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('created', 'Locker Created'), ('updated', 'Credentials Updated'), ('triggered', 'Inheritance Triggered'), ('otp_sent', 'OTP Sent to Inheritor'), ('access_granted', 'Access Granted'), ('failed_attempt', 'Failed Access Attempt'), ('viewed_credentials', 'Credentials Viewed'), ('exported_data', 'Data Exported'), ('auto_deleted', 'Auto-deleted')], max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('details', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('locker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='legacy.digitallocker')),
            ],
            options={
                'db_table': 'locker_access_log',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LockerAccessToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=10, unique=True)),
                ('attempts_used', models.PositiveIntegerField(default=0)),
                ('is_used', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('accessed_at', models.DateTimeField(blank=True, null=True)),
                ('locker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_tokens', to='legacy.digitallocker')),
            ],
            options={
                'db_table': 'locker_access_token',
            },
        ),
    ]
